// --------------------------------------------------------------------------------------------------------------------
// <copyright file="MustExtensions.cs">
//     Copyright (c) 2017. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;

    // See MustExtensions.cs for comments on type definitions
    using GetException = System.Func<System.Type, System.Collections.Generic.IEnumerable<string>, object, string, System.Exception>;
    using RulePredicate = System.Func<System.Type, object, bool>;
    using Rule = System.Tuple<System.Func<System.Type, object, bool>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Type, System.Collections.Generic.IEnumerable<string>, object, string, System.Exception>>;

    /// <summary>
    ///     Contains Must extension methods.
    /// </summary>
#if !SpritelyRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#pragma warning disable 0436
#endif
    internal static partial class MakeRule
    {
        private static readonly FieldInfo InnerExceptionField = typeof(Exception).GetField("_innerException", BindingFlags.NonPublic | BindingFlags.Instance);

        private static void SetInnerException(this Exception exception, Exception innerException)
        {
            InnerExceptionField.SetValue(exception, innerException);
        }

        /// <summary>
        /// Makes a rule That the specified predicate must pass for a validation to succeed.
        /// This is really just a convenience method to avoid having to create additional
        /// variables and specify the type of the predicate everywhere.
        /// </summary>
        /// <example>
        /// MakeRule.That{string}(s => !string.IsNullOrWhiteSpace(s)).OrCreate(...)
        /// 
        /// // As opposed to:
        /// Func{string, bool} notIsNullOrWhitespace = s => !string.IsNullOrWhiteSpace(s);
        /// notIsNullOrWhitespace.OrCreate(...)
        /// </example>
        /// <typeparam name="T">The type of the value being validated.</typeparam>
        /// <param name="predicate">The predicate to use to perform validation.</param>
        /// <returns>The predicate that was just passed as an argument.</returns>
        /// <exception cref="System.ArgumentNullException">If predicate is null.</exception>
        public static Func<T, bool> That<T>(Func<T, bool> predicate)
        {
            if (predicate == null)
            {
                throw new ArgumentNullException("predicate");
            }

            return predicate;
        }

        /// <summary>
        /// Makes a rule That the specified predicate must pass for a validation to succeed.
        /// This is really just a convenience method to avoid having to create additional
        /// variables and specify the type of the predicate everywhere. Typically the other
        /// overload of That is preferable as the argument is supplied later at evalution
        /// time rather than at rule creation time.
        /// </summary>
        /// <example>
        /// MakeRule.That(() => arg != null).OrCreate(...)
        /// 
        /// // As opposed to:
        /// Func{bool} notNull = () => arg != null;
        /// notNull.OrCreate(...)
        /// </example>
        /// <param name="predicate">The predicate to use to perform validation.</param>
        /// <returns>A predicate that conforms with Func{object, bool} type and simply
        /// calls the argument predicate while ignoring the passed instance.</returns>
        /// <exception cref="System.ArgumentNullException">If predicate is null.</exception>
        public static Func<object, bool> That(Func<bool> predicate)
        {
            if (predicate == null)
            {
                throw new ArgumentNullException("predicate");
            }

            Func<object, bool> result = _ => predicate();
            return result;
        }

        /// <summary>
        /// Creates a rule from a predicate function and specifies how to create an exception on failure.
        /// Exceptions should only be created using new and should NOT be thrown.
        /// </summary>
        /// <typeparam name="T">The type of argument being validated</typeparam>
        /// <typeparam name="TException">The type of the exception.</typeparam>
        /// <param name="predicate">The predicate function to determine argument validity.</param>
        /// <param name="newException">The function to call to create an exception when argument validation fails.
        /// This method should create the exception using new and should NOT throw it.</param>
        /// <returns>A newly constructed rule.</returns>
        /// <exception cref="System.ArgumentNullException">If predicate or newException are null.</exception>
        public static Rule OrCreate<T, TException>(
            this Func<T, bool> predicate,
            Func<Type, IEnumerable<string>, object, string, TException> newException)
            where TException : Exception, new()
        {
            if (predicate == null)
            {
                throw new ArgumentNullException("predicate");
            }

            if (newException == null)
            {
                throw new ArgumentNullException("newException");
            }

            IEnumerable<string> messages = new List<string>();
            GetException createException = newException;

            return Tuple.Create(predicate.ToRulePredicate(), messages, createException);
        }

        /// <summary>
        /// Creates a rule from a predicate function and specifies how to create an exception on failure.
        /// Exceptions should only be created using new and should NOT be thrown.
        /// </summary>
        /// <typeparam name="T">The type of argument being validated</typeparam>
        /// <typeparam name="TException">The type of the exception.</typeparam>
        /// <param name="predicate">The predicate function to determine argument validity.</param>
        /// <param name="newException">The function to call to create an exception when argument validation fails.
        /// This method should create the exception using new and should NOT throw it.</param>
        /// <returns>A newly constructed rule.</returns>
        /// <exception cref="System.ArgumentNullException">If predicate or newException are null.</exception>
        public static Rule OrCreate<T, TException>(
            this Func<T, bool> predicate,
            Func<IEnumerable<string>, object, string, TException> newException)
            where TException : Exception, new()
        {
            if (predicate == null)
            {
                throw new ArgumentNullException("predicate");
            }

            if (newException == null)
            {
                throw new ArgumentNullException("newException");
            }

            IEnumerable<string> messages = new List<string>();
            GetException createException = (type, reasons, argumentValue, argumentName) =>
            {
                var result = newException(reasons, argumentValue, argumentName);
                return result;
            };

            return Tuple.Create(predicate.ToRulePredicate(), messages, createException);
        }

        /// <summary>
        /// Creates a rule from a predicate function and specifies how to create an exception on failure.
        /// Exceptions should only be created using new and should NOT be thrown.
        /// </summary>
        /// <typeparam name="T">The type of argument being validated</typeparam>
        /// <typeparam name="TException">The type of the exception.</typeparam>
        /// <param name="predicate">The predicate function to determine argument validity.</param>
        /// <param name="newException">The function to call to create an exception when argument validation fails.
        /// This method should create the exception using new and should NOT throw it.</param>
        /// <returns>A newly constructed rule.</returns>
        /// <exception cref="System.ArgumentNullException">If predicate or newException are null.</exception>
        public static Rule OrCreate<T, TException>(
            this Func<T, bool> predicate,
            Func<object, string, TException> newException)
            where TException : Exception, new()
        {
            if (predicate == null)
            {
                throw new ArgumentNullException("predicate");
            }

            if (newException == null)
            {
                throw new ArgumentNullException("newException");
            }

            IEnumerable<string> messages = new List<string>();
            GetException createException = (type, reasons, argumentValue, argumentName) =>
            {
                var exception = newException(argumentValue, argumentName);
                var exceptionWithReasons = AddReasonsToException(reasons, argumentName, exception);

                return exceptionWithReasons;
            };

            return Tuple.Create(predicate.ToRulePredicate(), messages, createException);
        }

        /// <summary>
        /// Creates a rule from a predicate function and specifies how to create an exception on failure.
        /// Exceptions should only be created using new and should NOT be thrown.
        /// </summary>
        /// <typeparam name="T">The type of argument being validated</typeparam>
        /// <typeparam name="TException">The type of the exception.</typeparam>
        /// <param name="predicate">The predicate function to determine argument validity.</param>
        /// <param name="newException">The function to call to create an exception when argument validation fails.
        /// This method should create the exception using new and should NOT throw it.</param>
        /// <returns>A newly constructed rule.</returns>
        /// <exception cref="System.ArgumentNullException">If predicate or newException are null.</exception>
        public static Rule OrCreate<T, TException>(
            this Func<T, bool> predicate,
            Func<string, TException> newException)
            where TException : Exception, new()
        {
            if (predicate == null)
            {
                throw new ArgumentNullException("predicate");
            }

            if (newException == null)
            {
                throw new ArgumentNullException("newException");
            }

            IEnumerable<string> messages = new List<string>();
            GetException createException = (type, reasons, argumentValue, argumentName) =>
            {
                var exception = newException(argumentName);
                var exceptionWithReasons = AddReasonsToException(reasons, argumentName, exception);

                return exceptionWithReasons;
            };

            return Tuple.Create(predicate.ToRulePredicate(), messages, createException);
        }

        /// <summary>
        /// Creates a rule from a predicate function and specifies how to create an exception on failure.
        /// Exceptions should only be created using new and should NOT be thrown.
        /// </summary>
        /// <typeparam name="T">The type of argument being validated</typeparam>
        /// <typeparam name="TException">The type of the exception.</typeparam>
        /// <param name="predicate">The predicate function to determine argument validity.</param>
        /// <param name="newException">The function to call to create an exception when argument validation fails.
        /// This method should create the exception using new and should NOT throw it.</param>
        /// <returns>A newly constructed rule.</returns>
        /// <exception cref="System.ArgumentNullException">If predicate or newException are null.</exception>
        public static Rule OrCreate<T, TException>(
            this Func<T, bool> predicate,
            Func<TException> newException)
            where TException : Exception, new()
        {
            if (predicate == null)
            {
                throw new ArgumentNullException("predicate");
            }

            if (newException == null)
            {
                throw new ArgumentNullException("newException");
            }

            IEnumerable<string> messages = new List<string>();
            GetException createException = (type, reasons, argumentValue, argumentName) =>
            {
                var exception = newException();
                var exceptionWithReasons = AddReasonsToException(reasons, argumentName, exception);

                return exceptionWithReasons;
            };

            return Tuple.Create(predicate.ToRulePredicate(), messages, createException);
        }

        /// <summary>
        /// Creates a rule from a predicate function and specifies how to create an exception on failure.
        /// Exceptions should only be created using new and should NOT be thrown.
        /// </summary>
        /// <typeparam name="T">The type of argument being validated</typeparam>
        /// <typeparam name="TException">The type of the exception.</typeparam>
        /// <param name="predicate">The predicate function to determine argument validity.</param>
        /// <param name="exception">The exception to throw on failure. It should NOT be thrown inline.</param>
        /// <returns>A newly constructed rule.</returns>
        /// <exception cref="System.ArgumentNullException">If predicate or exception are null.</exception>
        public static Rule OrCreate<T, TException>(
            this Func<T, bool> predicate,
            TException exception)
            where TException : Exception, new()
        {
            if (predicate == null)
            {
                throw new ArgumentNullException("predicate");
            }

            if (exception == null)
            {
                throw new ArgumentNullException("exception");
            }

            IEnumerable<string> messages = new List<string>();
            GetException createException = (type, reasons, argumentValue, argumentName) =>
            {
                var exceptionWithReasons = AddReasonsToException(reasons, argumentName, exception);

                return exceptionWithReasons;
            };

            return Tuple.Create(predicate.ToRulePredicate(), messages, createException);
        }

        /// <summary>
        /// Shorthand for OrCreate() and supplying your own ArgumentNullException that already handles
        /// adding Because messages and the argument name to the exception.
        /// </summary>
        /// <typeparam name="T">The type of argument being validated</typeparam>
        /// <param name="predicate">The predicate function to determine argument validity.</param>
        /// <returns>A newly constructed rule.</returns>
        /// <exception cref="System.ArgumentNullException">If predicate is null.</exception>
        public static Rule OrCreateArgumentNullException<T>(
            this Func<T, bool> predicate)
        {
            return predicate.OrCreate(
                (messages, _, argumentName) =>
                    new ArgumentNullException(argumentName, string.Join(Environment.NewLine, messages)));
        }

        /// <summary>
        /// Shorthand for OrCreate() and supplying your own ArgumentException that already handles
        /// adding Because messages and the argument name to the exception.
        /// </summary>
        /// <typeparam name="T">The type of argument being validated</typeparam>
        /// <param name="predicate">The predicate function to determine argument validity.</param>
        /// <returns>A newly constructed rule.</returns>
        /// <exception cref="System.ArgumentNullException">If predicate is null.</exception>
        public static Rule OrCreateArgumentException<T>(
            this Func<T, bool> predicate)
        {
            return predicate.OrCreate(
                (messages, _, argumentName) =>
                    new ArgumentException(string.Join(Environment.NewLine, messages), argumentName));
        }

        /// <summary>
        /// Shorthand for OrCreate() and supplying your own ArgumentOutOfRangeException that already handles
        /// adding Because messages and the argument name and value to the exception.
        /// </summary>
        /// <typeparam name="T">The type of argument being validated</typeparam>
        /// <param name="predicate">The predicate function to determine argument validity.</param>
        /// <returns>A newly constructed rule.</returns>
        /// <exception cref="System.ArgumentNullException">If predicate is null.</exception>
        public static Rule OrCreateArgumentOutOfRangeException<T>(
            this Func<T, bool> predicate)
        {
            return predicate.OrCreate(
                (messages, argumentValue, argumentName) =>
                    new ArgumentOutOfRangeException(argumentName, argumentValue, string.Join(Environment.NewLine, messages)));
        }

        /// <summary>
        /// Adds a Because message to the rule to explain why it failed.
        /// </summary>
        /// <param name="rule">The rule to add the message to.</param>
        /// <param name="message">The message to add.</param>
        /// <returns>The updated rule</returns>
        /// <exception cref="System.ArgumentNullException">If rule or message is null.</exception>
        /// <exception cref="System.ArgumentException">If message is null or whitespace</exception>
        public static Rule Because(this Rule rule, string message)
        {
            if (rule == null)
            {
                throw new ArgumentNullException("rule");
            }

            if (message == null)
            {
                throw new ArgumentNullException("message");
            }

            if (string.IsNullOrWhiteSpace(message))
            {
                throw new ArgumentException("Because requires message to be not whitespace", "message");
            }

            var messages = rule.Item2.Concat(new[] { message });

            return Tuple.Create(rule.Item1, messages, rule.Item3);
        }

        private static Exception AddReasonsToException<TException>(
            IEnumerable<string> reasons,
            string argumentName,
            TException exception) where TException : Exception, new()
        {
            var validReasons = reasons.Where(r => !string.IsNullOrWhiteSpace(r)).ToList();

            if (validReasons.Any())
            {
                var combinedReasons = string.Join(Environment.NewLine, validReasons);
                var innerException = new ArgumentException(combinedReasons, argumentName, exception.InnerException);
                exception.SetInnerException(innerException);
            }

            return exception;
        }

        private static RulePredicate ToRulePredicate<T>(this Func<T, bool> predicate)
        {
            RulePredicate rulePredicate =
                (type, value) => typeof(T).IsAssignableFrom(type)
                    ? predicate((T)value)
                    : true /* skip validation for non-matching types - i.e. always valid */;

            return rulePredicate;
        }
    }
#if !SpritelyRecipesProject
#pragma warning restore 0436
#endif
}
