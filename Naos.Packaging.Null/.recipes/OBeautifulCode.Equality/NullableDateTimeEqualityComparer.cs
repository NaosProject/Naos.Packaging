// --------------------------------------------------------------------------------------------------------------------
// <copyright file="NullableDateTimeEqualityComparer.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Equality.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Equality.Recipes
{
    using global::System;
    using global::System.Collections.Generic;

    /// <summary>
    /// Compares two <see cref="Nullable{DateTime}"/>, fixing .NET's default implementation where two objects
    /// having the same <see cref="DateTime.Ticks"/> but different <see cref="DateTime.Kind"/> are
    /// considered equal.
    /// </summary>
#if !OBeautifulCodeEqualitySolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Equality.Recipes", "See package version number")]
    internal
#else
    public
#endif
    class NullableDateTimeEqualityComparer : IEqualityComparer<DateTime?>
    {
        /// <inheritdoc />
        public bool Equals(
            DateTime? x,
            DateTime? y)
        {
            // If both are null return true
            if (ReferenceEquals(x, y))
            {
                return true;
            }

            // If one is null, but not both, return false.
            if (ReferenceEquals(x, null) || ReferenceEquals(y, null))
            {
                return false;
            }

            var result = x.Equals(y) && (((DateTime)x).Kind == ((DateTime)y).Kind);

            return result;
        }

        /// <inheritdoc />
        public int GetHashCode(
            DateTime? obj)
        {
            var result = HashCodeHelper.Initialize().Hash(obj).Value;

            return result;
        }
    }
}
