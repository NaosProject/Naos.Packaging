// --------------------------------------------------------------------------------------------------------------------
// <copyright file="LambdaBackedEqualityComparer.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Equality.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Equality.Recipes
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Diagnostics.CodeAnalysis;

    using static global::System.FormattableString;

    /// <summary>
    /// An equality comparer backed by a lambda.
    /// </summary>
    /// <typeparam name="T">The type of objects to compare.</typeparam>
#if !OBeautifulCodeEqualitySolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Equality.Recipes", "See package version number")]
    internal
#else
    public
#endif
    class LambdaBackedEqualityComparer<T> : IEqualityComparer<T>
    {
        private readonly Func<T,T,bool> equalsFunc;

        private readonly Func<T, int> getHashCodeFunc;

        /// <summary>
        /// Initializes a new instance of the <see cref="LambdaBackedEqualityComparer{T}"/> class.
        /// </summary>
        /// <param name="equalsFunc">The function to use to determine whether two objects of type <typeparamref name="T"/> are equal.</param>
        /// <param name="getHashCodeFunc">OPTIONAL function to get the hash code for an object of type <typeparamref name="T"/> in context of this equality comparer.  DEFAULT is to have <see cref="IEqualityComparer{T}.GetHashCode(T)"/> throw <see cref="NotSupportedException"/>.</param>
        public LambdaBackedEqualityComparer(
            Func<T, T, bool> equalsFunc,
            Func<T, int> getHashCodeFunc = null)
        {
            if (equalsFunc == null)
            {
                throw new ArgumentNullException(nameof(equalsFunc));
            }

            this.equalsFunc = equalsFunc;
            this.getHashCodeFunc = getHashCodeFunc;
        }

        /// <inheritdoc />
        public bool Equals(
            T x,
            T y)
        {
            var result = this.equalsFunc(x, y);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations", Justification = "This exception is expected per the documentation in the constructor and is a feature of the class (the ability to omit a getHashCodeFunc when it the caller knows that it won't be used).")]
        public int GetHashCode(
            T obj)
        {
            if (this.getHashCodeFunc == null)
            {
                throw new NotSupportedException(Invariant($"{nameof(this.getHashCodeFunc)} was not specified in the constructor."));
            }

            var result = this.getHashCodeFunc(obj);

            return result;
        }
    }
}
