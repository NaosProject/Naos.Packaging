// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ByteArrayEqualityComparer.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Equality.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Equality.Recipes
{
    using global::System.Collections.Generic;

    /// <summary>
    /// Compares two byte arrays for equality.
    /// </summary>
#if !OBeautifulCodeEqualitySolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Equality.Recipes", "See package version number")]
    internal
#else
    public
#endif
    class ByteArrayEqualityComparer : IEqualityComparer<byte[]>
    {
        /// <inheritdoc />
        public bool Equals(
            byte[] x,
            byte[] y)
        {
            // If both are null, or both are same instance, return true.
            if (ReferenceEquals(x, y))
            {
                return true;
            }

            // If one is null, but not both, return false.
            if (ReferenceEquals(x, null) || ReferenceEquals(y, null))
            {
                return false;
            }

            var result = (x.Length == y.Length) && (NativeMethods.memcmp(x, y, x.Length) == 0);

            return result;
        }

        /// <inheritdoc />
        public int GetHashCode(
            byte[] obj)
        {
            return HashCodeHelper.Initialize().Hash(obj).Value;
        }
    }
}
