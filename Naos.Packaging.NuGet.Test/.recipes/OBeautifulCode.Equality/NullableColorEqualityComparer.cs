// --------------------------------------------------------------------------------------------------------------------
// <copyright file="NullableColorEqualityComparer.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Equality.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Equality.Recipes
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Drawing;

    /// <summary>
    /// Compares two <see cref="Nullable{Color}"/> structs, fixing .NET's default implementation where two values
    /// having the same <see cref="Color.ToArgb"/> might not be equal.
    /// </summary>
    /// <remarks>
    /// For example:
    /// var color1 = Color.PeachPuff;
    /// var color2 = Color.FromArgb(255, 218, 185);
    /// color1 != color2
    /// </remarks>
#if !OBeautifulCodeEqualitySolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Equality.Recipes", "See package version number")]
    internal
#else
    public
#endif
    class NullableColorEqualityComparer : IEqualityComparer<Color?>
    {
        /// <inheritdoc />
        public bool Equals(
            Color? x,
            Color? y)
        {
            // If both are null return true
            if (ReferenceEquals(x, y))
            {
                return true;
            }

            // If one is null, but not both, return false.
            if (ReferenceEquals(x, null) || ReferenceEquals(y, null))
            {
                return false;
            }

            var result =
                (x.Value.A == y.Value.A) &&
                (x.Value.R == y.Value.R) &&
                (x.Value.G == y.Value.G) &&
                (x.Value.B == y.Value.B);

            return result;
        }

        /// <inheritdoc />
        public int GetHashCode(
            Color? obj)
        {
            var result = HashCodeHelper.Initialize().Hash(obj).Value;

            return result;
        }
    }
}
