// --------------------------------------------------------------------------------------------------------------------
// <copyright file="SerializerFactory.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Serialization.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Serialization.Recipes
{
    using global::System;
    using global::System.Collections.Concurrent;

    using OBeautifulCode.Compression;
    using OBeautifulCode.Serialization.Bson;
    using OBeautifulCode.Serialization.Json;
    using OBeautifulCode.Serialization.PropertyBag;
    using OBeautifulCode.Type;

    using static System.FormattableString;

    /// <summary>
    /// Default implementation of <see cref="ISerializerFactory" />.
    /// </summary>
#if !OBeautifulCodeSerializationSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Serialization.Recipes", "See package version number")]
    internal
#else
    public
#endif
    sealed class SerializerFactory : SerializerFactoryBase
    {
        private static readonly SerializerFactory InternalInstance = new SerializerFactory();

        private static readonly ConcurrentDictionary<SerializerRepresentation, ConcurrentDictionary<VersionMatchStrategy, ISerializer>>
            CachedSerializerRepresentationToSerializerMap = new ConcurrentDictionary<SerializerRepresentation, ConcurrentDictionary<VersionMatchStrategy, ISerializer>>();

        private static readonly BsonSerializerFactory BsonSerializerFactory = new BsonSerializerFactory();

        private static readonly JsonSerializerFactory JsonSerializerFactory = new JsonSerializerFactory();

        private static readonly PropertyBagSerializerFactory PropertyBagSerializerFactory = new PropertyBagSerializerFactory();

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyBagSerializerFactory"/> class.
        /// </summary>
        /// <param name="compressorFactory">Optional compressor factory to use.  DEFAULT is to use OBeautifulCode.Compression.Recipes.CompressorFactory.Instance.</param>
        public SerializerFactory(
            ICompressorFactory compressorFactory = null)
            : base(compressorFactory)
        {
        }

        /// <summary>
        /// Gets the singleton entry point to the code.
        /// </summary>
        public static ISerializerFactory Instance => InternalInstance;

        /// <inheritdoc />
        public override ISerializer BuildSerializer(
            SerializerRepresentation serializerRepresentation,
            VersionMatchStrategy assemblyVersionMatchStrategy = VersionMatchStrategy.AnySingleVersion)
        {
            if (serializerRepresentation == null)
            {
                throw new ArgumentNullException(nameof(serializerRepresentation));
            }

            ISerializer result;

            if (CachedSerializerRepresentationToSerializerMap.TryGetValue(serializerRepresentation, out ConcurrentDictionary<VersionMatchStrategy, ISerializer> assemblyVersionMatchStrategyToSerializerMap))
            {
                if (assemblyVersionMatchStrategyToSerializerMap.TryGetValue(assemblyVersionMatchStrategy, out result))
                {
                    return result;
                }
            }

            ISerializer serializer;

            switch (serializerRepresentation.SerializationKind)
            {
                case SerializationKind.Bson:
                    serializer = BsonSerializerFactory.BuildSerializer(serializerRepresentation, assemblyVersionMatchStrategy);
                    break;
                case SerializationKind.Json:
                    serializer = JsonSerializerFactory.BuildSerializer(serializerRepresentation, assemblyVersionMatchStrategy);
                    break;
                case SerializationKind.PropertyBag:
                    serializer = PropertyBagSerializerFactory.BuildSerializer(serializerRepresentation, assemblyVersionMatchStrategy);
                    break;
                default:
                    throw new NotSupportedException(Invariant($"{nameof(serializerRepresentation)} from enumeration {nameof(SerializationKind)} of {serializerRepresentation.SerializationKind} is not supported."));
            }

            result = this.WrapInCompressingSerializerIfAppropriate(serializer, serializerRepresentation.CompressionKind);

            CachedSerializerRepresentationToSerializerMap.TryAdd(serializerRepresentation, new ConcurrentDictionary<VersionMatchStrategy, ISerializer>());

            CachedSerializerRepresentationToSerializerMap[serializerRepresentation].TryAdd(assemblyVersionMatchStrategy, result);

            return result;
        }
    }
}
