// --------------------------------------------------------------------------------------------------------------------
// <copyright file="DisposableAppDomain.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Reflection.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Reflection.Recipes
{
    using global::System;

    /// <summary>
    /// A wrapper for an <see cref="AppDomain"/> that implements <see cref="IDisposable"/>.
    /// </summary>
#if !OBeautifulCodeReflectionSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Reflection.Recipes", "See package version number")]
    internal
#else
    public
#endif
    class DisposableAppDomain : IDisposable
    {
        // ReSharper disable once RedundantDefaultMemberInitializer
        private bool disposedValue = false;

        /// <summary>
        /// Initializes a new instance of the <see cref="DisposableAppDomain"/> class.
        /// </summary>
        /// <param name="appDomain">The app domain.</param>
        public DisposableAppDomain(
            AppDomain appDomain)
        {
            if (appDomain == null)
            {
                throw new ArgumentNullException(nameof(appDomain));
            }

            this.AppDomain = appDomain;
        }

        /// <summary>
        /// Finalizes an instance of the <see cref="DisposableAppDomain"/> class.
        /// </summary>
        ~DisposableAppDomain()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            this.Dispose(false);
        }

        /// <summary>
        /// Gets the underlying app domain.
        /// </summary>
        public AppDomain AppDomain { get; }

        /// <summary>
        /// Dispose.
        /// </summary>
        public void Dispose()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            this.Dispose(true);

            GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if (this.disposedValue)
            {
                return;
            }

            if (disposing)
            {
                // No managed objects to dispose.
            }

            AppDomain.Unload(this.AppDomain);

            this.disposedValue = true;
        }
    }
}